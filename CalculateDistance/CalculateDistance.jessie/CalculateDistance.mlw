theory Jessie_model

use import int.Int

use bool.Bool

use import real.RealInfix

use real.Square

use import jessie3theories.Jessie_memory_model

type charP

type doubleP

type padding

type unsigned_charP

type vector

type voidP

function _RPCons real real : vector

function charP_tag  : (tag_id charP)

axiom charP_int "charP_int": ((int_of_tag charP_tag) = (1))

function charP_of_pointer_address (pointer ()) : (pointer charP)

axiom charP_of_pointer_address_of_pointer_addr "charP_of_pointer_address_of_pointer_addr":
 (forall p:(pointer charP).
  (p = (charP_of_pointer_address (pointer_address p))))

axiom charP_parenttag_bottom "charP_parenttag_bottom":
 (parenttag charP_tag bottom_tag)

axiom charP_tags "charP_tags":
 (forall x:(pointer charP).
  (forall charP_tag_table:(tag_table charP).
   (instanceof charP_tag_table x charP_tag)))

function pr1 vector : real

function pr2 vector : real

function diff(u:vector) (v:vector) : vector =
 (let u1 = (pr1 u)
  in (let u2 = (pr2 u)
      in (let v1 = (pr1 v)
          in (let v2 = (pr2 v)
              in (let pr1_0 = (Real.(-) u1 v1)
                  in (let pr2_0 = (Real.(-) u2 v2) in (_RPCons pr1_0 pr2_0)))))))

predicate difference_nonneg(a:(pointer doubleP)) (b:(pointer doubleP)) (start_i:int) (end_i:int) (doubleP_doubleM_at_L:(memory doubleP real)) =
 (forall i_1:int.
  (((Int.(<=) start_i i_1) /\ (Int.(<) i_1 end_i)) ->
   (Real.(>=)
   (Real.(-) (select doubleP_doubleM_at_L (shift a i_1))
   (select doubleP_doubleM_at_L (shift b i_1))) 0.0)))

function doubleP_tag  : (tag_id doubleP)

axiom doubleP_int "doubleP_int": ((int_of_tag doubleP_tag) = (1))

function doubleP_of_pointer_address (pointer ()) : (pointer doubleP)

axiom doubleP_of_pointer_address_of_pointer_addr "doubleP_of_pointer_address_of_pointer_addr":
 (forall p:(pointer doubleP).
  (p = (doubleP_of_pointer_address (pointer_address p))))

axiom doubleP_parenttag_bottom "doubleP_parenttag_bottom":
 (parenttag doubleP_tag bottom_tag)

axiom doubleP_tags "doubleP_tags":
 (forall x:(pointer doubleP).
  (forall doubleP_tag_table:(tag_table doubleP).
   (instanceof doubleP_tag_table x doubleP_tag)))

function euclidean_norm(p_2:(pointer doubleP)) (q:(pointer doubleP)) (doubleP_doubleM_at_L:(memory doubleP real)) : real =
 (Square.sqrt
 (Real.(+)
 (Real.(*)
 (Real.(-) (select doubleP_doubleM_at_L (shift p_2 (0)))
 (select doubleP_doubleM_at_L (shift q (0))))
 (Real.(-) (select doubleP_doubleM_at_L (shift p_2 (0)))
 (select doubleP_doubleM_at_L (shift q (0)))))
 (Real.(*)
 (Real.(-) (select doubleP_doubleM_at_L (shift p_2 (1)))
 (select doubleP_doubleM_at_L (shift q (1))))
 (Real.(-) (select doubleP_doubleM_at_L (shift p_2 (1)))
 (select doubleP_doubleM_at_L (shift q (1)))))))

predicate left_valid_struct_charP(p:(pointer charP)) (a:int) (charP_alloc_table:(alloc_table charP)) =
 ((offset_min charP_alloc_table p) <= a)

predicate left_valid_struct_doubleP(p:(pointer doubleP)) (a:int) (doubleP_alloc_table:(alloc_table doubleP)) =
 ((offset_min doubleP_alloc_table p) <= a)

predicate left_valid_struct_unsigned_charP(p:(pointer unsigned_charP)) (a:int) (unsigned_charP_alloc_table:(alloc_table unsigned_charP)) =
 ((offset_min unsigned_charP_alloc_table p) <= a)

predicate left_valid_struct_voidP(p:(pointer voidP)) (a:int) (voidP_alloc_table:(alloc_table voidP)) =
 ((offset_min voidP_alloc_table p) <= a)

function norm vector : real

axiom pointer_addr_of_charP_of_pointer_address "pointer_addr_of_charP_of_pointer_address":
 (forall p:(pointer ()).
  (p = (pointer_address (charP_of_pointer_address p))))

axiom pointer_addr_of_doubleP_of_pointer_address "pointer_addr_of_doubleP_of_pointer_address":
 (forall p:(pointer ()).
  (p = (pointer_address (doubleP_of_pointer_address p))))

function unsigned_charP_of_pointer_address (pointer ()) : (pointer unsigned_charP)

axiom pointer_addr_of_unsigned_charP_of_pointer_address "pointer_addr_of_unsigned_charP_of_pointer_address":
 (forall p:(pointer ()).
  (p = (pointer_address (unsigned_charP_of_pointer_address p))))

function voidP_of_pointer_address (pointer ()) : (pointer voidP)

axiom pointer_addr_of_voidP_of_pointer_address "pointer_addr_of_voidP_of_pointer_address":
 (forall p:(pointer ()).
  (p = (pointer_address (voidP_of_pointer_address p))))

predicate right_valid_struct_charP(p:(pointer charP)) (b:int) (charP_alloc_table:(alloc_table charP)) =
 ((offset_max charP_alloc_table p) >= b)

predicate right_valid_struct_doubleP(p:(pointer doubleP)) (b:int) (doubleP_alloc_table:(alloc_table doubleP)) =
 ((offset_max doubleP_alloc_table p) >= b)

predicate right_valid_struct_unsigned_charP(p:(pointer unsigned_charP)) (b:int) (unsigned_charP_alloc_table:(alloc_table unsigned_charP)) =
 ((offset_max unsigned_charP_alloc_table p) >= b)

predicate right_valid_struct_voidP(p:(pointer voidP)) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 ((offset_max voidP_alloc_table p) >= b)

predicate strict_valid_root_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) = a)
 /\ ((offset_max charP_alloc_table p) = b))

predicate strict_valid_root_doubleP(p:(pointer doubleP)) (a:int) (b:int) (doubleP_alloc_table:(alloc_table doubleP)) =
 (((offset_min doubleP_alloc_table p) = a)
 /\ ((offset_max doubleP_alloc_table p) = b))

predicate strict_valid_root_unsigned_charP(p:(pointer unsigned_charP)) (a:int) (b:int) (unsigned_charP_alloc_table:(alloc_table unsigned_charP)) =
 (((offset_min unsigned_charP_alloc_table p) = a)
 /\ ((offset_max unsigned_charP_alloc_table p) = b))

predicate strict_valid_root_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) = a)
 /\ ((offset_max voidP_alloc_table p) = b))

predicate strict_valid_struct_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) = a)
 /\ ((offset_max charP_alloc_table p) = b))

predicate strict_valid_struct_doubleP(p:(pointer doubleP)) (a:int) (b:int) (doubleP_alloc_table:(alloc_table doubleP)) =
 (((offset_min doubleP_alloc_table p) = a)
 /\ ((offset_max doubleP_alloc_table p) = b))

predicate strict_valid_struct_unsigned_charP(p:(pointer unsigned_charP)) (a:int) (b:int) (unsigned_charP_alloc_table:(alloc_table unsigned_charP)) =
 (((offset_min unsigned_charP_alloc_table p) = a)
 /\ ((offset_max unsigned_charP_alloc_table p) = b))

predicate strict_valid_struct_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) = a)
 /\ ((offset_max voidP_alloc_table p) = b))

function unsigned_charP_tag  : (tag_id unsigned_charP)

axiom unsigned_charP_int "unsigned_charP_int":
 ((int_of_tag unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr "unsigned_charP_of_pointer_address_of_pointer_addr":
 (forall p:(pointer unsigned_charP).
  (p = (unsigned_charP_of_pointer_address (pointer_address p))))

axiom unsigned_charP_parenttag_bottom "unsigned_charP_parenttag_bottom":
 (parenttag unsigned_charP_tag bottom_tag)

axiom unsigned_charP_tags "unsigned_charP_tags":
 (forall x:(pointer unsigned_charP).
  (forall unsigned_charP_tag_table:(tag_table unsigned_charP).
   (instanceof unsigned_charP_tag_table x unsigned_charP_tag)))

predicate valid_root_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) <= a)
 /\ ((offset_max charP_alloc_table p) >= b))

predicate valid_root_doubleP(p:(pointer doubleP)) (a:int) (b:int) (doubleP_alloc_table:(alloc_table doubleP)) =
 (((offset_min doubleP_alloc_table p) <= a)
 /\ ((offset_max doubleP_alloc_table p) >= b))

predicate valid_root_unsigned_charP(p:(pointer unsigned_charP)) (a:int) (b:int) (unsigned_charP_alloc_table:(alloc_table unsigned_charP)) =
 (((offset_min unsigned_charP_alloc_table p) <= a)
 /\ ((offset_max unsigned_charP_alloc_table p) >= b))

predicate valid_root_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) <= a)
 /\ ((offset_max voidP_alloc_table p) >= b))

predicate valid_struct_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) <= a)
 /\ ((offset_max charP_alloc_table p) >= b))

predicate valid_struct_doubleP(p:(pointer doubleP)) (a:int) (b:int) (doubleP_alloc_table:(alloc_table doubleP)) =
 (((offset_min doubleP_alloc_table p) <= a)
 /\ ((offset_max doubleP_alloc_table p) >= b))

predicate valid_struct_unsigned_charP(p:(pointer unsigned_charP)) (a:int) (b:int) (unsigned_charP_alloc_table:(alloc_table unsigned_charP)) =
 (((offset_min unsigned_charP_alloc_table p) <= a)
 /\ ((offset_max unsigned_charP_alloc_table p) >= b))

predicate valid_struct_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) <= a)
 /\ ((offset_max voidP_alloc_table p) >= b))

function voidP_tag  : (tag_id voidP)

axiom voidP_int "voidP_int": ((int_of_tag voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr "voidP_of_pointer_address_of_pointer_addr":
 (forall p:(pointer voidP).
  (p = (voidP_of_pointer_address (pointer_address p))))

axiom voidP_parenttag_bottom "voidP_parenttag_bottom":
 (parenttag voidP_tag bottom_tag)

axiom voidP_tags "voidP_tags":
 (forall x:(pointer voidP).
  (forall voidP_tag_table:(tag_table voidP).
   (instanceof voidP_tag_table x voidP_tag)))

axiom vector_inductive "expl:vector_inductive, axiom"
 #"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.jessie/CalculateDistance.jc" 42 2 126#:
 (forall x_2:vector.
  (exists x1_0:real. (exists x0_0:real. (x_2 = (_RPCons x1_0 x0_0)))))

axiom pr1_def "expl:Lemma pr1_def, axiom"
 #"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 10 4 60#:
 (forall x_3:real. (forall y_0:real. ((pr1 (_RPCons x_3 y_0)) = x_3)))

axiom pr2_def "expl:Lemma pr2_def, axiom"
 #"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 11 4 60#:
 (forall x_0_0:real.
  (forall y_0_0:real. ((pr2 (_RPCons x_0_0 y_0_0)) = y_0_0)))

lemma norm_add "expl:Lemma norm_add, lemma"
 #"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 33 4 611#:
 (forall a_0:vector.
  (forall b_0:vector.
   (forall c:vector.
    (forall d:vector.
     (Real.(<=) (norm (diff a_0 b_0))
     (Real.(+) (Real.(+) (norm (diff c d)) (norm (diff a_0 c)))
     (norm (diff b_0 d))))))))

lemma _Ine "expl:Lemma Ine, lemma"
 #"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 36 4 476#:
 (forall er:real.
  (forall err:real.
   (forall sim:vector.
    (forall _Sim:vector.
     (forall st:vector.
      (forall _St:vector.
       (((Real.(<=) (norm (diff sim _Sim)) err)
        /\ (Real.(<=) (norm (diff st _St)) er)) ->
        ((Real.(<=) (norm (diff sim st))
         (Real.(+) (Real.(+) (norm (diff _Sim _St)) err) er))
        /\ (Real.(>=) (norm (diff sim st))
           (Real.(-) (norm (diff _Sim _St)) (Real.(+) err er)))))))))))

lemma euclidian_is_norm "expl:Lemma euclidian_is_norm, lemma"
 #"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 41 4 193#:
 (forall doubleP_doubleM_at_L:(memory doubleP real).
  (forall p_3:(pointer doubleP).
   (forall q_0:(pointer doubleP).
    ((difference_nonneg p_3 q_0 (0) (2) doubleP_doubleM_at_L) ->
     ((euclidean_norm p_3 q_0 doubleP_doubleM_at_L) = (norm
                                                      (diff
                                                      (_RPCons
                                                      (select
                                                      doubleP_doubleM_at_L
                                                      (shift p_3 (0)))
                                                      (select
                                                      doubleP_doubleM_at_L
                                                      (shift p_3 (1))))
                                                      (_RPCons
                                                      (select
                                                      doubleP_doubleM_at_L
                                                      (shift q_0 (0)))
                                                      (select
                                                      doubleP_doubleM_at_L
                                                      (shift q_0 (1)))))))))))

end

module Jessie_program

use import int.Int

use bool.Bool

use import real.RealInfix

use real.Square

use import jessie3theories.Jessie_memory_model

use import Jessie_model

use import ref.Ref

use import jessie3.JessieDivision

use import jessie3.Jessie_memory_model_parameters

use import jessie3_integer.Integer

val doubleP_alloc_table : ref (alloc_table doubleP)

val doubleP_doubleM : ref (memory doubleP real)

val _CalculateDistance
 (x_1:(pointer doubleP))
  (y:(pointer doubleP)) : real
   requires { true } reads { doubleP_alloc_table, doubleP_doubleM } 
    ensures { (#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/" 0 0 0#
              ((#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 54 14 394#
               (forall err_0:real.
                (forall er_0:real.
                 (forall _Sim_0:(pointer doubleP).
                  (forall _St_0:(pointer doubleP).
                   (((difference_nonneg _Sim_0 _St_0 (0) (2)
                     !doubleP_doubleM)
                    /\ ((difference_nonneg x_1 _Sim_0 (0) (2)
                        !doubleP_doubleM)
                       /\ ((difference_nonneg y _St_0 (0) (2)
                           !doubleP_doubleM)
                          /\ ((Real.(<=)
                              (euclidean_norm x_1 _Sim_0 !doubleP_doubleM)
                              err_0)
                             /\ (Real.(<=)
                                (euclidean_norm y _St_0 !doubleP_doubleM)
                                er_0))))) ->
                    ((Real.(<=) result
                     (Real.(+)
                     (Real.(+) (euclidean_norm _Sim_0 _St_0 !doubleP_doubleM)
                     err_0) er_0))
                    /\ (Real.(>=) result
                       (Real.(-)
                       (euclidean_norm _Sim_0 _St_0 !doubleP_doubleM)
                       (Real.(+) err_0 er_0))))))))))
              /\ (#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 61 14 74#
                 (result = (norm
                           (diff
                           (_RPCons (select !doubleP_doubleM (shift x_1 (0)))
                           (select !doubleP_doubleM (shift x_1 (1))))
                           (_RPCons (select !doubleP_doubleM (shift y (0)))
                           (select !doubleP_doubleM (shift y (1)))))))))) }

val _CalculateDistance_requires
 (x_1:(pointer doubleP))
  (y:(pointer doubleP)) : real
   requires { (#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.jessie/" 0 0 0#
              ((#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 51 15 35#
               (Int.(<=) (offset_min !doubleP_alloc_table x_1) (0)))
              /\ ((#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 51 15 35#
                  (Int.(>=) (offset_max !doubleP_alloc_table x_1) (1)))
                 /\ ((#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 52 15 35#
                     (Int.(<=) (offset_min !doubleP_alloc_table y) (0)))
                    /\ ((#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 52 15 35#
                        (Int.(>=) (offset_max !doubleP_alloc_table y) (1)))
                       /\ (#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 53 15 44#
                          (difference_nonneg x_1 y (0) (2) !doubleP_doubleM))))))) }
   reads { doubleP_alloc_table, doubleP_doubleM } 
    ensures { (#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/" 0 0 0#
              ((#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 54 14 394#
               (forall err_0:real.
                (forall er_0:real.
                 (forall _Sim_0:(pointer doubleP).
                  (forall _St_0:(pointer doubleP).
                   (((difference_nonneg _Sim_0 _St_0 (0) (2)
                     !doubleP_doubleM)
                    /\ ((difference_nonneg x_1 _Sim_0 (0) (2)
                        !doubleP_doubleM)
                       /\ ((difference_nonneg y _St_0 (0) (2)
                           !doubleP_doubleM)
                          /\ ((Real.(<=)
                              (euclidean_norm x_1 _Sim_0 !doubleP_doubleM)
                              err_0)
                             /\ (Real.(<=)
                                (euclidean_norm y _St_0 !doubleP_doubleM)
                                er_0))))) ->
                    ((Real.(<=) result
                     (Real.(+)
                     (Real.(+) (euclidean_norm _Sim_0 _St_0 !doubleP_doubleM)
                     err_0) er_0))
                    /\ (Real.(>=) result
                       (Real.(-)
                       (euclidean_norm _Sim_0 _St_0 !doubleP_doubleM)
                       (Real.(+) err_0 er_0))))))))))
              /\ (#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 61 14 74#
                 (result = (norm
                           (diff
                           (_RPCons (select !doubleP_doubleM (shift x_1 (0)))
                           (select !doubleP_doubleM (shift x_1 (1))))
                           (_RPCons (select !doubleP_doubleM (shift y (0)))
                           (select !doubleP_doubleM (shift y (1)))))))))) }

exception Loop_continue_exc ()

exception Loop_exit_exc ()

exception Return_label_exc ()

val charP_alloc_table : ref (alloc_table charP)

val charP_tag_table : ref (tag_table charP)

val alloc_struct_charP
 (n:int)
  (charP_alloc_table:ref (alloc_table charP))
   (charP_tag_table:ref (tag_table charP)) : (pointer charP)
    requires { true } writes { charP_alloc_table, charP_tag_table }
     ensures { ((strict_valid_struct_charP result (0) (Int.(-) n (1))
                !charP_alloc_table)
               /\ ((alloc_extends (old !charP_alloc_table)
                   !charP_alloc_table)
                  /\ ((alloc_fresh (old !charP_alloc_table) result n)
                     /\ (instanceof !charP_tag_table result charP_tag)))) }

val alloc_struct_charP_requires
 (n:int)
  (charP_alloc_table:ref (alloc_table charP))
   (charP_tag_table:ref (tag_table charP)) : (pointer charP)
    requires { (Int.(>=) n (0)) } writes { charP_alloc_table,
    charP_tag_table }
     ensures { ((strict_valid_struct_charP result (0) (Int.(-) n (1))
                !charP_alloc_table)
               /\ ((alloc_extends (old !charP_alloc_table)
                   !charP_alloc_table)
                  /\ ((alloc_fresh (old !charP_alloc_table) result n)
                     /\ (instanceof !charP_tag_table result charP_tag)))) }

val doubleP_tag_table : ref (tag_table doubleP)

val alloc_struct_doubleP
 (n:int)
  (doubleP_alloc_table:ref (alloc_table doubleP))
   (doubleP_tag_table:ref (tag_table doubleP)) : (pointer doubleP)
    requires { true } writes { doubleP_alloc_table, doubleP_tag_table }
     ensures { ((strict_valid_struct_doubleP result (0) (Int.(-) n (1))
                !doubleP_alloc_table)
               /\ ((alloc_extends (old !doubleP_alloc_table)
                   !doubleP_alloc_table)
                  /\ ((alloc_fresh (old !doubleP_alloc_table) result n)
                     /\ (instanceof !doubleP_tag_table result doubleP_tag)))) }

val alloc_struct_doubleP_requires
 (n:int)
  (doubleP_alloc_table:ref (alloc_table doubleP))
   (doubleP_tag_table:ref (tag_table doubleP)) : (pointer doubleP)
    requires { (Int.(>=) n (0)) } writes { doubleP_alloc_table,
    doubleP_tag_table }
     ensures { ((strict_valid_struct_doubleP result (0) (Int.(-) n (1))
                !doubleP_alloc_table)
               /\ ((alloc_extends (old !doubleP_alloc_table)
                   !doubleP_alloc_table)
                  /\ ((alloc_fresh (old !doubleP_alloc_table) result n)
                     /\ (instanceof !doubleP_tag_table result doubleP_tag)))) }

val unsigned_charP_alloc_table : ref (alloc_table unsigned_charP)

val unsigned_charP_tag_table : ref (tag_table unsigned_charP)

val alloc_struct_unsigned_charP
 (n:int)
  (unsigned_charP_alloc_table:ref (alloc_table unsigned_charP))
   (unsigned_charP_tag_table:ref (tag_table unsigned_charP))
    : (pointer unsigned_charP)
    requires { true } writes { unsigned_charP_alloc_table,
    unsigned_charP_tag_table }
     ensures { ((strict_valid_struct_unsigned_charP result (0)
                (Int.(-) n (1)) !unsigned_charP_alloc_table)
               /\ ((alloc_extends (old !unsigned_charP_alloc_table)
                   !unsigned_charP_alloc_table)
                  /\ ((alloc_fresh (old !unsigned_charP_alloc_table) result
                      n)
                     /\ (instanceof !unsigned_charP_tag_table result
                        unsigned_charP_tag)))) }

val alloc_struct_unsigned_charP_requires
 (n:int)
  (unsigned_charP_alloc_table:ref (alloc_table unsigned_charP))
   (unsigned_charP_tag_table:ref (tag_table unsigned_charP))
    : (pointer unsigned_charP)
    requires { (Int.(>=) n (0)) } writes { unsigned_charP_alloc_table,
    unsigned_charP_tag_table }
     ensures { ((strict_valid_struct_unsigned_charP result (0)
                (Int.(-) n (1)) !unsigned_charP_alloc_table)
               /\ ((alloc_extends (old !unsigned_charP_alloc_table)
                   !unsigned_charP_alloc_table)
                  /\ ((alloc_fresh (old !unsigned_charP_alloc_table) result
                      n)
                     /\ (instanceof !unsigned_charP_tag_table result
                        unsigned_charP_tag)))) }

val voidP_alloc_table : ref (alloc_table voidP)

val voidP_tag_table : ref (tag_table voidP)

val alloc_struct_voidP
 (n:int)
  (voidP_alloc_table:ref (alloc_table voidP))
   (voidP_tag_table:ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures { ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
                !voidP_alloc_table)
               /\ ((alloc_extends (old !voidP_alloc_table)
                   !voidP_alloc_table)
                  /\ ((alloc_fresh (old !voidP_alloc_table) result n)
                     /\ (instanceof !voidP_tag_table result voidP_tag)))) }

val alloc_struct_voidP_requires
 (n:int)
  (voidP_alloc_table:ref (alloc_table voidP))
   (voidP_tag_table:ref (tag_table voidP)) : (pointer voidP)
    requires { (Int.(>=) n (0)) } writes { voidP_alloc_table,
    voidP_tag_table }
     ensures { ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
                !voidP_alloc_table)
               /\ ((alloc_extends (old !voidP_alloc_table)
                   !voidP_alloc_table)
                  /\ ((alloc_fresh (old !voidP_alloc_table) result n)
                     /\ (instanceof !voidP_tag_table result voidP_tag)))) }

val charP_charM : ref (memory charP int)

val sqrt
 (x_0:real) : real
  requires { true }
   ensures { (#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 46 12 30#
             (result = (Square.sqrt x_0))) }

val sqrt_requires
 (x_0:real) : real
  requires { (#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 45 13 19#
             (Real.(<=) 0.0 x_0)) }
   ensures { (#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 46 12 30#
             (result = (Square.sqrt x_0))) }

val unsigned_charP_unsigned_charM : ref (memory unsigned_charP int)

let _CalculateDistance_ensures_default "expl:Function CalculateDistance, default behavior"
 #"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 63 7 24#=
 fun (x_1 : (pointer doubleP)) (y : (pointer doubleP)) ->
  requires { ((valid_struct_doubleP y (0) (0) !doubleP_alloc_table)
             /\ ((valid_struct_doubleP x_1 (0) (0) !doubleP_alloc_table)
                /\ (#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.jessie/" 0 0 0#
                   ((#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 51 15 35#
                    (Int.(<=) (offset_min !doubleP_alloc_table x_1) (0)))
                   /\ ((#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 51 15 35#
                       (Int.(>=) (offset_max !doubleP_alloc_table x_1) (1)))
                      /\ ((#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 52 15 35#
                          (Int.(<=) (offset_min !doubleP_alloc_table y) (0)))
                         /\ ((#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 52 15 35#
                             (Int.(>=) (offset_max !doubleP_alloc_table y)
                             (1)))
                            /\ (#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 53 15 44#
                               (difference_nonneg x_1 y (0) (2)
                               !doubleP_doubleM)))))))))  }
  ensures { (#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/" 0 0 0#
            ((#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 54 14 394#
             (forall err_0:real.
              (forall er_0:real.
               (forall _Sim_0:(pointer doubleP).
                (forall _St_0:(pointer doubleP).
                 (((difference_nonneg _Sim_0 _St_0 (0) (2) !doubleP_doubleM)
                  /\ ((difference_nonneg x_1 _Sim_0 (0) (2) !doubleP_doubleM)
                     /\ ((difference_nonneg y _St_0 (0) (2) !doubleP_doubleM)
                        /\ ((Real.(<=)
                            (euclidean_norm x_1 _Sim_0 !doubleP_doubleM)
                            err_0)
                           /\ (Real.(<=)
                              (euclidean_norm y _St_0 !doubleP_doubleM) er_0))))) ->
                  ((Real.(<=) result
                   (Real.(+)
                   (Real.(+) (euclidean_norm _Sim_0 _St_0 !doubleP_doubleM)
                   err_0) er_0))
                  /\ (Real.(>=) result
                     (Real.(-) (euclidean_norm _Sim_0 _St_0 !doubleP_doubleM)
                     (Real.(+) err_0 er_0))))))))))
            /\ (#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 61 14 74#
               (result = (norm
                         (diff
                         (_RPCons (select !doubleP_doubleM (shift x_1 (0)))
                         (select !doubleP_doubleM (shift x_1 (1))))
                         (_RPCons (select !doubleP_doubleM (shift y (0)))
                         (select !doubleP_doubleM (shift y (1)))))))))) }
  ('Init: 
  (let return = ref (any_real ()) in
  try
   begin
     (let p_4 = ref (any_real ()) in
     ('C_5: 
     ('C_30: 
     begin
       (let jessie_16 = (p_4 := 0.0) in ());
      (let jessie_19 =
      (p_4 := ('C_29: 
              (let jessie_18 =
              ('C_28: 
              ((Real.(+) ('C_27: 
                         ((Real.(*) ('C_26: 
                                    ((Real.(-) ('C_25: 
                                               ((safe_acc_ !doubleP_doubleM) 
                                                ('C_24:  ((shift x_1) (0)))))) 
                                     ('C_23: 
                                     ((safe_acc_ !doubleP_doubleM) ('C_22: 
                                                                   ((shift y) (0)))))))) 
                          ('C_21: 
                          ((Real.(-) ('C_20: 
                                     ((safe_acc_ !doubleP_doubleM) ('C_19: 
                                                                   ((shift x_1) (0)))))) 
                           ('C_18: 
                           ((safe_acc_ !doubleP_doubleM) ('C_17: 
                                                         ((shift y) (0)))))))))) 
               ('C_16: 
               ((Real.(*) ('C_15: 
                          ((Real.(-) ('C_14: 
                                     ((safe_acc_ !doubleP_doubleM) ('C_13: 
                                                                   ((shift x_1) (1)))))) 
                           ('C_12: 
                           ((safe_acc_ !doubleP_doubleM) ('C_11: 
                                                         ((shift y) (1)))))))) 
                ('C_10: 
                ((Real.(-) ('C_9: 
                           ((safe_acc_ !doubleP_doubleM) ('C_8: 
                                                         ((shift x_1) (1)))))) 
                 ('C_7: 
                 ((safe_acc_ !doubleP_doubleM) ('C_6:  ((shift y) (1))))))))))) in
              ("expl:precondition for call"
              #"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 65 12 67#
              (sqrt jessie_18))))) in ()); (return := !p_4); (raise Return)
     end))); absurd  end with Return -> !return end)) 

let _CalculateDistance_safety "expl:Function CalculateDistance, Safety"
 #"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 63 7 24#=
 fun (x_1 : (pointer doubleP)) (y : (pointer doubleP)) ->
  requires { ((valid_struct_doubleP y (0) (0) !doubleP_alloc_table)
             /\ ((valid_struct_doubleP x_1 (0) (0) !doubleP_alloc_table)
                /\ (#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.jessie/" 0 0 0#
                   ((#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 51 15 35#
                    (Int.(<=) (offset_min !doubleP_alloc_table x_1) (0)))
                   /\ ((#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 51 15 35#
                       (Int.(>=) (offset_max !doubleP_alloc_table x_1) (1)))
                      /\ ((#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 52 15 35#
                          (Int.(<=) (offset_min !doubleP_alloc_table y) (0)))
                         /\ ((#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 52 15 35#
                             (Int.(>=) (offset_max !doubleP_alloc_table y)
                             (1)))
                            /\ (#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 53 15 44#
                               (difference_nonneg x_1 y (0) (2)
                               !doubleP_doubleM)))))))))  } ensures { true }
  ('Init: 
  (let return = ref (any_real ()) in
  try
   begin
     (let p_4 = ref (any_real ()) in
     ('C_5: 
     ('C_30: 
     begin
       (let jessie_10 = (p_4 := 0.0) in ());
      (let jessie_13 =
      (p_4 := ('C_29: 
              (let jessie_12 =
              ('C_28: 
              ((Real.(+) ('C_27: 
                         ((Real.(*) ('C_26: 
                                    ((Real.(-) ('C_25: 
                                               ((safe_acc_ !doubleP_doubleM) 
                                                ('C_24:  ((shift x_1) (0)))))) 
                                     ('C_23: 
                                     ((safe_acc_ !doubleP_doubleM) ('C_22: 
                                                                   ((shift y) (0)))))))) 
                          ('C_21: 
                          ((Real.(-) ('C_20: 
                                     ((safe_acc_ !doubleP_doubleM) ('C_19: 
                                                                   ((shift x_1) (0)))))) 
                           ('C_18: 
                           ((safe_acc_ !doubleP_doubleM) ('C_17: 
                                                         ((shift y) (0)))))))))) 
               ('C_16: 
               ((Real.(*) ('C_15: 
                          ((Real.(-) ('C_14: 
                                     ("expl:index bounds"
                                     #"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 65 44 48#
                                     ((((lsafe_lbound_acc_ !doubleP_alloc_table) !doubleP_doubleM) x_1) (1))))) 
                           ('C_12: 
                           ("expl:index bounds"
                           #"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 65 49 53#
                           ((((lsafe_lbound_acc_ !doubleP_alloc_table) !doubleP_doubleM) y) (1))))))) 
                ('C_10: 
                ((Real.(-) ('C_9: 
                           ("expl:index bounds"
                           #"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 65 56 60#
                           ((((lsafe_lbound_acc_ !doubleP_alloc_table) !doubleP_doubleM) x_1) (1))))) 
                 ('C_7: 
                 ("expl:index bounds"
                 #"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 65 61 65#
                 ((((lsafe_lbound_acc_ !doubleP_alloc_table) !doubleP_doubleM) y) (1)))))))))) in
              ("expl:precondition for call"
              #"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 65 12 67#
              (sqrt_requires jessie_12))))) in ()); (return := !p_4);
      (raise Return) end))); absurd  end with Return -> !return end)) 

let sqrt_ensures_default "expl:Function sqrt, default behavior"
 #"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 48 9 13#=
 fun (x_0 : real) ->
  requires { (#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 45 13 19#
             (Real.(<=) 0.0 x_0))  }
  ensures { (#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 46 12 30#
            (result = (Square.sqrt x_0))) }('Init: 
                                           (let return = ref (any_real ()) in
                                           try
                                            begin
                                              (let tmp = ref (any_real ()) in
                                              ('C_2: 
                                              begin
                                                (let jessie_7 =
                                                (tmp := ('C_1: 
                                                        (let jessie_6 =
                                                        x_0 in
                                                        ("expl:precondition for call"
                                                        #"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 49 11 18#
                                                        (sqrt jessie_6))))) in
                                                ()); (return := !tmp);
                                               (raise Return) end)); 
                                             absurd  end with Return ->
                                            !return end)) 

let sqrt_safety "expl:Function sqrt, Safety"
 #"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 48 9 13#=
 fun (x_0 : real) ->
  requires { (#"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 45 13 19#
             (Real.(<=) 0.0 x_0))  } ensures { true }('Init: 
                                                     (let return =
                                                     ref (any_real ()) in
                                                     try
                                                      begin
                                                        (let tmp =
                                                        ref (any_real ()) in
                                                        ('C_2: 
                                                        begin
                                                          (let jessie_3 =
                                                          (tmp := ('C_1: 
                                                                  (let jessie_2 =
                                                                  x_0 in
                                                                  ("expl:variant decreases"
                                                                  #"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 49 11 18#
                                                                  (check
                                                                  { (zwf_zero
                                                                    (0) (0)) };
                                                                  ("expl:precondition for call"
                                                                  #"/home/moobar/formal/frama-c-Fluorine-20130601/tests/merge-spacing/11/CalculateDistance.c" 49 11 18#
                                                                  (sqrt_requires jessie_2))))))) in
                                                          ());
                                                         (return := !tmp);
                                                         (raise Return) end));
                                                       absurd  end with
                                                      Return -> !return end)) 

end


