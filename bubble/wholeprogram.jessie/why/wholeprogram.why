type charP

type int32

type int8

type intP

type padding

type uint8

type unsigned_charP

type voidP

logic integer_of_int32: int32 -> int

predicate bubble_sorted(a_0_0:intP pointer, start_i:int, end_i:int,
 intP_intM_a_0_3:(intP, int32) memory) =
 (forall k1:int.
  ((le_int(start_i, k1) and lt_int(k1, end_i)) ->
   le_int(integer_of_int32(select(intP_intM_a_0_3, shift(a_0_0, k1))),
   integer_of_int32(select(intP_intM_a_0_3, shift(a_0_0, add_int(k1, (1))))))))

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

predicate dom(k_0:int, n:int) =
 (ge_int(k_0, (0)) and le_int(k_0, sub_int(n, (1))))

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8, y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic intP_tag:  -> intP tag_id

axiom intP_int : (int_of_tag(intP_tag) = (1))

logic intP_of_pointer_address: unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr :
 (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom : parenttag(intP_tag, bottom_tag)

axiom intP_tags :
 (forall x:intP pointer.
  (forall intP_tag_table:intP tag_table.
   instanceof(intP_tag_table, x, intP_tag)))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_intP(p:intP pointer, a:int,
 intP_alloc_table:intP alloc_table) = (offset_min(intP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address: unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_intP(p:intP pointer, b:int,
 intP_alloc_table:intP alloc_table) = (offset_max(intP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p:unsigned_charP pointer, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate swapped(a:intP pointer, i_1:int, j_0:int,
 intP_intM_a_1_at_L2:(intP, int32) memory,
 intP_intM_a_1_at_L1:(intP, int32) memory) =
 ((integer_of_int32(select(intP_intM_a_1_at_L1, shift(a, i_1))) = integer_of_int32(
                                                                  select(intP_intM_a_1_at_L2,
                                                                  shift(a,
                                                                  j_0))))
 and ((integer_of_int32(select(intP_intM_a_1_at_L1, shift(a, j_0))) = 
      integer_of_int32(select(intP_intM_a_1_at_L2, shift(a, i_1))))
     and (forall k:int.
          (((k <> i_1) and (k <> j_0)) ->
           (integer_of_int32(select(intP_intM_a_1_at_L1, shift(a, k))) = 
           integer_of_int32(select(intP_intM_a_1_at_L2, shift(a, k))))))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_extensionality :
 (forall x:uint8.
  (forall y:uint8[eq_int(integer_of_uint8(x), integer_of_uint8(y))].
   (eq_int(integer_of_uint8(x), integer_of_uint8(y)) -> (x = y))))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

logic unsigned_charP_tag:  -> unsigned_charP tag_id

axiom unsigned_charP_int : (int_of_tag(unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_charP pointer.
  (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom :
 parenttag(unsigned_charP_tag, bottom_tag)

axiom unsigned_charP_tags :
 (forall x:unsigned_charP pointer.
  (forall unsigned_charP_tag_table:unsigned_charP tag_table.
   instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter intP_alloc_table : intP alloc_table ref

parameter intP_tag_table : intP tag_table ref

parameter alloc_struct_intP :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { } intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter alloc_struct_intP_requires :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { ge_int(n, (0))} intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter unsigned_charP_alloc_table : unsigned_charP alloc_table ref

parameter unsigned_charP_tag_table : unsigned_charP tag_table ref

parameter alloc_struct_unsigned_charP :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { } unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter alloc_struct_unsigned_charP_requires :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { ge_int(n, (0))} unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter bubble :
 a_1:intP pointer ->
  n_1:int32 ->
   intP_intM_a_4:(intP, int32) memory ref ->
    intP_a_4_alloc_table:intP alloc_table ->
     { } unit reads intP_intM_a_4 writes intP_intM_a_4
     { ((JC_58:
        bubble_sorted(a_1, (0), sub_int(integer_of_int32(n_1), (1)),
        intP_intM_a_4))
       and (JC_54:
           not_assigns(intP_a_4_alloc_table, intP_intM_a_4@, intP_intM_a_4,
           pset_range(pset_singleton(a_1), (0),
           sub_int(integer_of_int32(n_1), (1)))))) }

parameter bubble_requires :
 a_1:intP pointer ->
  n_1:int32 ->
   intP_intM_a_4:(intP, int32) memory ref ->
    intP_a_4_alloc_table:intP alloc_table ->
     { (JC_44:
       ((JC_41: le_int((0), integer_of_int32(n_1)))
       and ((JC_42: le_int(offset_min(intP_a_4_alloc_table, a_1), (0)))
           and (JC_43:
               ge_int(offset_max(intP_a_4_alloc_table, a_1),
               sub_int(integer_of_int32(n_1), (1)))))))}
     unit reads intP_intM_a_4 writes intP_intM_a_4
     { ((JC_58:
        bubble_sorted(a_1, (0), sub_int(integer_of_int32(n_1), (1)),
        intP_intM_a_4))
       and (JC_54:
           not_assigns(intP_a_4_alloc_table, intP_intM_a_4@, intP_intM_a_4,
           pset_range(pset_singleton(a_1), (0),
           sub_int(integer_of_int32(n_1), (1)))))) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter swap3 :
 a_0:intP pointer ->
  n_2:int32 ->
   i:int32 ->
    j:int32 ->
     intP_intM_a_0_2:(intP, int32) memory ref ->
      intP_a_0_2_alloc_table:intP alloc_table ->
       { } unit reads intP_intM_a_0_2 writes intP_intM_a_0_2
       { (JC_34:
         ((JC_32:
          ((JC_29:
           (forall i1:int.
            (dom(i1, integer_of_int32(n_2)) ->
             (exists i2:int.
              (dom(i2, integer_of_int32(n_2))
              and (integer_of_int32(select(intP_intM_a_0_2@, shift(a_0, i1))) = 
                  integer_of_int32(select(intP_intM_a_0_2, shift(a_0, i2)))))))))
          and ((JC_30:
               swapped(a_0, integer_of_int32(i), integer_of_int32(j),
               intP_intM_a_0_2, intP_intM_a_0_2@))
              and (JC_31:
                  (forall k_1:int.
                   ((le_int((0), k_1)
                    and (lt_int(k_1, integer_of_int32(n_2))
                        and ((k_1 <> integer_of_int32(i))
                            and (k_1 <> integer_of_int32(j))))) ->
                    (integer_of_int32(select(intP_intM_a_0_2,
                                      shift(a_0, k_1))) = integer_of_int32(
                                                          select(intP_intM_a_0_2@,
                                                          shift(a_0, k_1))))))))))
         and (JC_33:
             not_assigns(intP_a_0_2_alloc_table, intP_intM_a_0_2@,
             intP_intM_a_0_2,
             pset_union(pset_range(pset_singleton(a_0), integer_of_int32(j),
                        integer_of_int32(j)),
             pset_range(pset_singleton(a_0), integer_of_int32(i),
             integer_of_int32(i))))))) }

parameter swap3_requires :
 a_0:intP pointer ->
  n_2:int32 ->
   i:int32 ->
    j:int32 ->
     intP_intM_a_0_2:(intP, int32) memory ref ->
      intP_a_0_2_alloc_table:intP alloc_table ->
       { (JC_10:
         ((JC_1: ge_int(integer_of_int32(n_2), (0)))
         and ((JC_2: le_int(offset_min(intP_a_0_2_alloc_table, a_0), (0)))
             and ((JC_3:
                  ge_int(offset_max(intP_a_0_2_alloc_table, a_0),
                  sub_int(integer_of_int32(n_2), (1))))
                 and ((JC_4: dom(integer_of_int32(i), integer_of_int32(n_2)))
                     and ((JC_5:
                          dom(integer_of_int32(j), integer_of_int32(n_2)))
                         and ((JC_6:
                              le_int(offset_min(intP_a_0_2_alloc_table, a_0),
                              integer_of_int32(i)))
                             and ((JC_7:
                                  ge_int(offset_max(intP_a_0_2_alloc_table,
                                         a_0),
                                  integer_of_int32(i)))
                                 and ((JC_8:
                                      le_int(offset_min(intP_a_0_2_alloc_table,
                                             a_0),
                                      integer_of_int32(j)))
                                     and (JC_9:
                                         ge_int(offset_max(intP_a_0_2_alloc_table,
                                                a_0),
                                         integer_of_int32(j))))))))))))}
       unit reads intP_intM_a_0_2 writes intP_intM_a_0_2
       { (JC_34:
         ((JC_32:
          ((JC_29:
           (forall i1:int.
            (dom(i1, integer_of_int32(n_2)) ->
             (exists i2:int.
              (dom(i2, integer_of_int32(n_2))
              and (integer_of_int32(select(intP_intM_a_0_2@, shift(a_0, i1))) = 
                  integer_of_int32(select(intP_intM_a_0_2, shift(a_0, i2)))))))))
          and ((JC_30:
               swapped(a_0, integer_of_int32(i), integer_of_int32(j),
               intP_intM_a_0_2, intP_intM_a_0_2@))
              and (JC_31:
                  (forall k_1:int.
                   ((le_int((0), k_1)
                    and (lt_int(k_1, integer_of_int32(n_2))
                        and ((k_1 <> integer_of_int32(i))
                            and (k_1 <> integer_of_int32(j))))) ->
                    (integer_of_int32(select(intP_intM_a_0_2,
                                      shift(a_0, k_1))) = integer_of_int32(
                                                          select(intP_intM_a_0_2@,
                                                          shift(a_0, k_1))))))))))
         and (JC_33:
             not_assigns(intP_a_0_2_alloc_table, intP_intM_a_0_2@,
             intP_intM_a_0_2,
             pset_union(pset_range(pset_singleton(a_0), integer_of_int32(j),
                        integer_of_int32(j)),
             pset_range(pset_singleton(a_0), integer_of_int32(i),
             integer_of_int32(i))))))) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let bubble_ensures_bubble_sorted =
 fun (a_1 : intP pointer) (n_1 : int32) (intP_intM_a_4 : (intP, int32) memory ref) (intP_a_4_alloc_table : intP alloc_table) ->
  { (JC_49:
    ((JC_46: le_int((0), integer_of_int32(n_1)))
    and ((JC_47: le_int(offset_min(intP_a_4_alloc_table, a_1), (0)))
        and (JC_48:
            ge_int(offset_max(intP_a_4_alloc_table, a_1),
            sub_int(integer_of_int32(n_1), (1))))))) }
  (init:
  try
   begin
     (let i_0 = ref (any_int32 void) in
     (let k_2 = ref (any_int32 void) in
     try
      (C_32:
      (loop_5:
      begin
        (let jessie_60 = (k_2 := n_1) in void);
       while true do
       { invariant (JC_122: true)  }
        begin
          [ { } unit reads intP_intM_a_4,k_2
            { ((JC_115:
               (forall i2_1:int.
                (forall i1_2:int.
                 ((ge_int(i2_1, (0))
                  and (lt_int(i2_1, integer_of_int32(k_2))
                      and (ge_int(i1_2, integer_of_int32(k_2))
                          and lt_int(i1_2, integer_of_int32(n_1))))) ->
                  ge_int(integer_of_int32(select(intP_intM_a_4,
                                          shift(a_1, i1_2))),
                  integer_of_int32(select(intP_intM_a_4, shift(a_1, i2_1))))))))
              and ((JC_116:
                   ((integer_of_int32(k_2) = integer_of_int32(n_1))
                   or (forall i1_1:int.
                       ((gt_int(i1_1, integer_of_int32(k_2))
                        and lt_int(i1_1, integer_of_int32(n_1))) ->
                        le_int(integer_of_int32(select(intP_intM_a_4,
                                                shift(a_1,
                                                integer_of_int32(k_2)))),
                        integer_of_int32(select(intP_intM_a_4,
                                         shift(a_1, i1_1))))))))
                  and ((JC_117:
                       bubble_sorted(a_1, integer_of_int32(k_2),
                       sub_int(integer_of_int32(n_1), (1)), intP_intM_a_4))
                      and (JC_120:
                          ((JC_118: ge_int(integer_of_int32(k_2), (0)))
                          and (JC_119:
                              le_int(integer_of_int32(k_2),
                              integer_of_int32(n_1)))))))) } ];
         try
          begin
            (if ((gt_int_ (integer_of_int32 !k_2)) (0)) then void
            else (raise (Goto_while_0_break_exc void)));
           try
            (C_40:
            (loop_6:
            begin
              (let jessie_62 = (i_0 := (safe_int32_of_integer_ (0))) in void);
             while true do
             { invariant (JC_132: true)  }
              begin
                [ { } unit reads i_0,intP_intM_a_4,k_2
                  { ((JC_124:
                     (forall i1_0:int.
                      (forall i2_0:int.
                       ((ge_int(i2_0, (0))
                        and (lt_int(i2_0, integer_of_int32(k_2))
                            and (ge_int(i1_0, integer_of_int32(k_2))
                                and le_int(i1_0,
                                    sub_int(integer_of_int32(n_1), (1)))))) ->
                        ge_int(integer_of_int32(select(intP_intM_a_4,
                                                shift(a_1, i1_0))),
                        integer_of_int32(select(intP_intM_a_4,
                                         shift(a_1, i2_0))))))))
                    and ((JC_125:
                         bubble_sorted(a_1, integer_of_int32(k_2),
                         sub_int(integer_of_int32(n_1), (1)), intP_intM_a_4))
                        and ((JC_126:
                             (forall j_1:int.
                              ((ge_int(j_1, (0))
                               and lt_int(j_1, integer_of_int32(i_0))) ->
                               le_int(integer_of_int32(select(intP_intM_a_4,
                                                       shift(a_1, j_1))),
                               integer_of_int32(select(intP_intM_a_4,
                                                shift(a_1,
                                                integer_of_int32(i_0))))))))
                            and (JC_130:
                                ((JC_127: ge_int(integer_of_int32(i_0), (0)))
                                and ((JC_128:
                                     lt_int(integer_of_int32(i_0),
                                     integer_of_int32(k_2)))
                                    and (JC_129:
                                        le_int(integer_of_int32(i_0),
                                        integer_of_int32(n_1))))))))) } ];
               try
                begin
                  (let jessie_68 =
                  (C_66:
                  begin
                    (if ((lt_int_ (integer_of_int32 !i_0)) (integer_of_int32 
                                                            (C_51:
                                                            (safe_int32_of_integer_ 
                                                             (C_50:
                                                             ((sub_int 
                                                               (integer_of_int32 !k_2)) (1)))))))
                    then void else (raise (Goto_while_1_break_exc void)));
                   (if ((gt_int_ (integer_of_int32 (C_63:
                                                   ((safe_acc_ !intP_intM_a_4) 
                                                    (C_62:
                                                    ((shift a_1) (integer_of_int32 !i_0))))))) 
                        (integer_of_int32 (C_61:
                                          ((safe_acc_ !intP_intM_a_4) 
                                           (C_60:
                                           ((shift (C_59:
                                                   ((shift a_1) (integer_of_int32 !i_0)))) (1)))))))
                   then
                    begin
                      [ { } unit
                        { (JC_134: ge_int(integer_of_int32(n_1), (0))) } ];
                     void;
                     [ { } unit reads i_0
                       { (JC_135:
                         (ge_int(integer_of_int32(i_0), (0))
                         and le_int(integer_of_int32(i_0),
                             sub_int(integer_of_int32(n_1), (1))))) } ];
                     void;
                     [ { } unit reads i_0
                       { (JC_136:
                         (ge_int(add_int(integer_of_int32(i_0), (1)), (0))
                         and le_int(add_int(integer_of_int32(i_0), (1)),
                             sub_int(integer_of_int32(n_1), (1))))) } ];
                     void;
                     [ { } unit
                       { (JC_137:
                         (le_int(offset_min(intP_a_4_alloc_table, a_1), (0))
                         and ge_int(offset_max(intP_a_4_alloc_table, a_1),
                             sub_int(integer_of_int32(n_1), (1))))) } ];
                     void;
                     (C_58:
                     (let jessie_66 = a_1 in
                     (let jessie_65 = n_1 in
                     (let jessie_64 = !i_0 in
                     (let jessie_63 =
                     (C_57:
                     (safe_int32_of_integer_ (C_56:
                                             ((add_int (integer_of_int32 !i_0)) (1))))) in
                     (JC_138:
                     ((((((swap3 jessie_66) jessie_65) jessie_64) jessie_63) intP_intM_a_4) intP_a_4_alloc_table)))))))
                    end else void);
                   (i_0 := (C_65:
                           (safe_int32_of_integer_ (C_64:
                                                   ((add_int (integer_of_int32 !i_0)) (1))))));
                   !i_0 end) in void); (raise (Loop_continue_exc void)) end
                with Loop_continue_exc jessie_4 -> void end end done;
             (raise (Goto_while_1_break_exc void)) end)) with
            Goto_while_1_break_exc jessie_1 ->
            (let jessie_70 =
            (while_1_break:
            (C_69:
            begin
              void;
             (k_2 := (C_68:
                     (safe_int32_of_integer_ (C_67:
                                             ((sub_int (integer_of_int32 !k_2)) (1))))));
             !k_2 end)) in void) end; (raise (Loop_continue_exc void)) end
          with Loop_continue_exc jessie_6 -> void end end done;
       (raise (Goto_while_0_break_exc void)) end)) with
      Goto_while_0_break_exc jessie_2 ->
      (while_0_break: begin   void; (raise Return) end) end)); (raise Return)
   end with Return -> void end)
  { (JC_57:
    bubble_sorted(a_1, (0), sub_int(integer_of_int32(n_1), (1)),
    intP_intM_a_4)) }

let bubble_ensures_default =
 fun (a_1 : intP pointer) (n_1 : int32) (intP_intM_a_4 : (intP, int32) memory ref) (intP_a_4_alloc_table : intP alloc_table) ->
  { (JC_49:
    ((JC_46: le_int((0), integer_of_int32(n_1)))
    and ((JC_47: le_int(offset_min(intP_a_4_alloc_table, a_1), (0)))
        and (JC_48:
            ge_int(offset_max(intP_a_4_alloc_table, a_1),
            sub_int(integer_of_int32(n_1), (1))))))) }
  (init:
  try
   begin
     (let i_0 = ref (any_int32 void) in
     (let k_2 = ref (any_int32 void) in
     try
      (C_32:
      (loop_3:
      begin
        (let jessie_48 = (k_2 := n_1) in void);
       while true do
       { invariant
           (((JC_91:
             (forall i2_1:int.
              (forall i1_2:int.
               ((ge_int(i2_1, (0))
                and (lt_int(i2_1, integer_of_int32(k_2))
                    and (ge_int(i1_2, integer_of_int32(k_2))
                        and lt_int(i1_2, integer_of_int32(n_1))))) ->
                ge_int(integer_of_int32(select(intP_intM_a_4,
                                        shift(a_1, i1_2))),
                integer_of_int32(select(intP_intM_a_4, shift(a_1, i2_1))))))))
            and ((JC_92:
                 ((integer_of_int32(k_2) = integer_of_int32(n_1))
                 or (forall i1_1:int.
                     ((gt_int(i1_1, integer_of_int32(k_2))
                      and lt_int(i1_1, integer_of_int32(n_1))) ->
                      le_int(integer_of_int32(select(intP_intM_a_4,
                                              shift(a_1,
                                              integer_of_int32(k_2)))),
                      integer_of_int32(select(intP_intM_a_4,
                                       shift(a_1, i1_1))))))))
                and ((JC_93:
                     bubble_sorted(a_1, integer_of_int32(k_2),
                     sub_int(integer_of_int32(n_1), (1)), intP_intM_a_4))
                    and (JC_96:
                        ((JC_94: ge_int(integer_of_int32(k_2), (0)))
                        and (JC_95:
                            le_int(integer_of_int32(k_2),
                            integer_of_int32(n_1))))))))
           and (JC_98:
               not_assigns(intP_a_4_alloc_table, intP_intM_a_4@init,
               intP_intM_a_4,
               pset_range(pset_singleton(a_1), (0),
               sub_int(integer_of_int32(n_1), (1))))))  }
        begin
          [ { } unit { true } ];
         try
          begin
            (if ((gt_int_ (integer_of_int32 !k_2)) (0)) then void
            else (raise (Goto_while_0_break_exc void)));
           try
            (C_40:
            (loop_4:
            begin
              (let jessie_50 = (i_0 := (safe_int32_of_integer_ (0))) in void);
             while true do
             { invariant
                 (((JC_100:
                   (forall i1_0:int.
                    (forall i2_0:int.
                     ((ge_int(i2_0, (0))
                      and (lt_int(i2_0, integer_of_int32(k_2))
                          and (ge_int(i1_0, integer_of_int32(k_2))
                              and le_int(i1_0,
                                  sub_int(integer_of_int32(n_1), (1)))))) ->
                      ge_int(integer_of_int32(select(intP_intM_a_4,
                                              shift(a_1, i1_0))),
                      integer_of_int32(select(intP_intM_a_4,
                                       shift(a_1, i2_0))))))))
                  and ((JC_101:
                       bubble_sorted(a_1, integer_of_int32(k_2),
                       sub_int(integer_of_int32(n_1), (1)), intP_intM_a_4))
                      and ((JC_102:
                           (forall j_1:int.
                            ((ge_int(j_1, (0))
                             and lt_int(j_1, integer_of_int32(i_0))) ->
                             le_int(integer_of_int32(select(intP_intM_a_4,
                                                     shift(a_1, j_1))),
                             integer_of_int32(select(intP_intM_a_4,
                                              shift(a_1,
                                              integer_of_int32(i_0))))))))
                          and (JC_106:
                              ((JC_103: ge_int(integer_of_int32(i_0), (0)))
                              and ((JC_104:
                                   lt_int(integer_of_int32(i_0),
                                   integer_of_int32(k_2)))
                                  and (JC_105:
                                      le_int(integer_of_int32(i_0),
                                      integer_of_int32(n_1)))))))))
                 and (JC_108:
                     not_assigns(intP_a_4_alloc_table, intP_intM_a_4@init,
                     intP_intM_a_4,
                     pset_range(pset_singleton(a_1), (0),
                     sub_int(integer_of_int32(n_1), (1))))))  }
              begin
                [ { } unit { true } ];
               try
                begin
                  (let jessie_56 =
                  (C_66:
                  begin
                    (if ((lt_int_ (integer_of_int32 !i_0)) (integer_of_int32 
                                                            (C_51:
                                                            (safe_int32_of_integer_ 
                                                             (C_50:
                                                             ((sub_int 
                                                               (integer_of_int32 !k_2)) (1)))))))
                    then void else (raise (Goto_while_1_break_exc void)));
                   (if ((gt_int_ (integer_of_int32 (C_63:
                                                   ((safe_acc_ !intP_intM_a_4) 
                                                    (C_62:
                                                    ((shift a_1) (integer_of_int32 !i_0))))))) 
                        (integer_of_int32 (C_61:
                                          ((safe_acc_ !intP_intM_a_4) 
                                           (C_60:
                                           ((shift (C_59:
                                                   ((shift a_1) (integer_of_int32 !i_0)))) (1)))))))
                   then
                    begin
                      (assert
                      { (JC_110: ge_int(integer_of_int32(n_1), (0))) }; void);
                     void;
                     (assert
                     { (JC_111:
                       (ge_int(integer_of_int32(i_0), (0))
                       and le_int(integer_of_int32(i_0),
                           sub_int(integer_of_int32(n_1), (1))))) }; void);
                     void;
                     (assert
                     { (JC_112:
                       (ge_int(add_int(integer_of_int32(i_0), (1)), (0))
                       and le_int(add_int(integer_of_int32(i_0), (1)),
                           sub_int(integer_of_int32(n_1), (1))))) }; void);
                     void;
                     (assert
                     { (JC_113:
                       (le_int(offset_min(intP_a_4_alloc_table, a_1), (0))
                       and ge_int(offset_max(intP_a_4_alloc_table, a_1),
                           sub_int(integer_of_int32(n_1), (1))))) }; void);
                     void;
                     (C_58:
                     (let jessie_54 = a_1 in
                     (let jessie_53 = n_1 in
                     (let jessie_52 = !i_0 in
                     (let jessie_51 =
                     (C_57:
                     (safe_int32_of_integer_ (C_56:
                                             ((add_int (integer_of_int32 !i_0)) (1))))) in
                     (JC_114:
                     ((((((swap3 jessie_54) jessie_53) jessie_52) jessie_51) intP_intM_a_4) intP_a_4_alloc_table)))))))
                    end else void);
                   (i_0 := (C_65:
                           (safe_int32_of_integer_ (C_64:
                                                   ((add_int (integer_of_int32 !i_0)) (1))))));
                   !i_0 end) in void); (raise (Loop_continue_exc void)) end
                with Loop_continue_exc jessie_4 -> void end end done;
             (raise (Goto_while_1_break_exc void)) end)) with
            Goto_while_1_break_exc jessie_1 ->
            (let jessie_58 =
            (while_1_break:
            (C_69:
            begin
              void;
             (k_2 := (C_68:
                     (safe_int32_of_integer_ (C_67:
                                             ((sub_int (integer_of_int32 !k_2)) (1))))));
             !k_2 end)) in void) end; (raise (Loop_continue_exc void)) end
          with Loop_continue_exc jessie_6 -> void end end done;
       (raise (Goto_while_0_break_exc void)) end)) with
      Goto_while_0_break_exc jessie_2 ->
      (while_0_break: begin   void; (raise Return) end) end)); (raise Return)
   end with Return -> void end)
  { (JC_52:
    not_assigns(intP_a_4_alloc_table, intP_intM_a_4@, intP_intM_a_4,
    pset_range(pset_singleton(a_1), (0), sub_int(integer_of_int32(n_1), (1))))) }

let bubble_safety =
 fun (a_1 : intP pointer) (n_1 : int32) (intP_intM_a_4 : (intP, int32) memory ref) (intP_a_4_alloc_table : intP alloc_table) ->
  { (JC_49:
    ((JC_46: le_int((0), integer_of_int32(n_1)))
    and ((JC_47: le_int(offset_min(intP_a_4_alloc_table, a_1), (0)))
        and (JC_48:
            ge_int(offset_max(intP_a_4_alloc_table, a_1),
            sub_int(integer_of_int32(n_1), (1))))))) }
  (init:
  try
   begin
     (let i_0 = ref (any_int32 void) in
     (let k_2 = ref (any_int32 void) in
     try
      (C_32:
      (loop_1:
      begin
        (let jessie_36 = (k_2 := n_1) in void);
       while true do
       { invariant (JC_66: true)
         variant (JC_90 : sub_int(integer_of_int32(k_2), (1))) }
        begin
          [ { } unit reads intP_intM_a_4,k_2
            { ((JC_59:
               (forall i2_1:int.
                (forall i1_2:int.
                 ((ge_int(i2_1, (0))
                  and (lt_int(i2_1, integer_of_int32(k_2))
                      and (ge_int(i1_2, integer_of_int32(k_2))
                          and lt_int(i1_2, integer_of_int32(n_1))))) ->
                  ge_int(integer_of_int32(select(intP_intM_a_4,
                                          shift(a_1, i1_2))),
                  integer_of_int32(select(intP_intM_a_4, shift(a_1, i2_1))))))))
              and ((JC_60:
                   ((integer_of_int32(k_2) = integer_of_int32(n_1))
                   or (forall i1_1:int.
                       ((gt_int(i1_1, integer_of_int32(k_2))
                        and lt_int(i1_1, integer_of_int32(n_1))) ->
                        le_int(integer_of_int32(select(intP_intM_a_4,
                                                shift(a_1,
                                                integer_of_int32(k_2)))),
                        integer_of_int32(select(intP_intM_a_4,
                                         shift(a_1, i1_1))))))))
                  and ((JC_61:
                       bubble_sorted(a_1, integer_of_int32(k_2),
                       sub_int(integer_of_int32(n_1), (1)), intP_intM_a_4))
                      and (JC_64:
                          ((JC_62: ge_int(integer_of_int32(k_2), (0)))
                          and (JC_63:
                              le_int(integer_of_int32(k_2),
                              integer_of_int32(n_1)))))))) } ];
         try
          begin
            (if ((gt_int_ (integer_of_int32 !k_2)) (0)) then void
            else (raise (Goto_while_0_break_exc void)));
           try
            (C_40:
            (loop_2:
            begin
              (let jessie_38 = (i_0 := (safe_int32_of_integer_ (0))) in void);
             while true do
             { invariant (JC_76: true)
               variant (JC_88 : sub_int(sub_int(integer_of_int32(k_2),
                                        integer_of_int32(i_0)),
                                (1))) }
              begin
                [ { } unit reads i_0,intP_intM_a_4,k_2
                  { ((JC_68:
                     (forall i1_0:int.
                      (forall i2_0:int.
                       ((ge_int(i2_0, (0))
                        and (lt_int(i2_0, integer_of_int32(k_2))
                            and (ge_int(i1_0, integer_of_int32(k_2))
                                and le_int(i1_0,
                                    sub_int(integer_of_int32(n_1), (1)))))) ->
                        ge_int(integer_of_int32(select(intP_intM_a_4,
                                                shift(a_1, i1_0))),
                        integer_of_int32(select(intP_intM_a_4,
                                         shift(a_1, i2_0))))))))
                    and ((JC_69:
                         bubble_sorted(a_1, integer_of_int32(k_2),
                         sub_int(integer_of_int32(n_1), (1)), intP_intM_a_4))
                        and ((JC_70:
                             (forall j_1:int.
                              ((ge_int(j_1, (0))
                               and lt_int(j_1, integer_of_int32(i_0))) ->
                               le_int(integer_of_int32(select(intP_intM_a_4,
                                                       shift(a_1, j_1))),
                               integer_of_int32(select(intP_intM_a_4,
                                                shift(a_1,
                                                integer_of_int32(i_0))))))))
                            and (JC_74:
                                ((JC_71: ge_int(integer_of_int32(i_0), (0)))
                                and ((JC_72:
                                     lt_int(integer_of_int32(i_0),
                                     integer_of_int32(k_2)))
                                    and (JC_73:
                                        le_int(integer_of_int32(i_0),
                                        integer_of_int32(n_1))))))))) } ];
               try
                begin
                  (let jessie_44 =
                  (C_66:
                  begin
                    (if ((lt_int_ (integer_of_int32 !i_0)) (integer_of_int32 
                                                            (C_51:
                                                            (JC_78:
                                                            (int32_of_integer_ 
                                                             (C_50:
                                                             ((sub_int 
                                                               (integer_of_int32 !k_2)) (1))))))))
                    then void else (raise (Goto_while_1_break_exc void)));
                   (if ((gt_int_ (integer_of_int32 (C_63:
                                                   (JC_79:
                                                   ((((offset_acc_ intP_a_4_alloc_table) !intP_intM_a_4) a_1) 
                                                    (integer_of_int32 !i_0)))))) 
                        (integer_of_int32 (C_61:
                                          (JC_80:
                                          ((((offset_acc_ intP_a_4_alloc_table) !intP_intM_a_4) 
                                            (C_59:
                                            ((shift a_1) (integer_of_int32 !i_0)))) (1))))))
                   then
                    begin
                      [ { } unit
                        { (JC_81: ge_int(integer_of_int32(n_1), (0))) } ];
                     void;
                     [ { } unit reads i_0
                       { (JC_82:
                         (ge_int(integer_of_int32(i_0), (0))
                         and le_int(integer_of_int32(i_0),
                             sub_int(integer_of_int32(n_1), (1))))) } ];
                     void;
                     [ { } unit reads i_0
                       { (JC_83:
                         (ge_int(add_int(integer_of_int32(i_0), (1)), (0))
                         and le_int(add_int(integer_of_int32(i_0), (1)),
                             sub_int(integer_of_int32(n_1), (1))))) } ];
                     void;
                     [ { } unit
                       { (JC_84:
                         (le_int(offset_min(intP_a_4_alloc_table, a_1), (0))
                         and ge_int(offset_max(intP_a_4_alloc_table, a_1),
                             sub_int(integer_of_int32(n_1), (1))))) } ];
                     void;
                     (C_58:
                     (let jessie_42 = a_1 in
                     (let jessie_41 = n_1 in
                     (let jessie_40 = !i_0 in
                     (let jessie_39 =
                     (C_57:
                     (JC_85:
                     (int32_of_integer_ (C_56:
                                        ((add_int (integer_of_int32 !i_0)) (1)))))) in
                     (JC_86:
                     ((((((swap3_requires jessie_42) jessie_41) jessie_40) jessie_39) intP_intM_a_4) intP_a_4_alloc_table)))))))
                    end else void);
                   (i_0 := (C_65:
                           (JC_87:
                           (int32_of_integer_ (C_64:
                                              ((add_int (integer_of_int32 !i_0)) (1)))))));
                   !i_0 end) in void); (raise (Loop_continue_exc void)) end
                with Loop_continue_exc jessie_4 -> void end end done;
             (raise (Goto_while_1_break_exc void)) end)) with
            Goto_while_1_break_exc jessie_1 ->
            (let jessie_46 =
            (while_1_break:
            (C_69:
            begin
              void;
             (k_2 := (C_68:
                     (JC_89:
                     (int32_of_integer_ (C_67:
                                        ((sub_int (integer_of_int32 !k_2)) (1)))))));
             !k_2 end)) in void) end; (raise (Loop_continue_exc void)) end
          with Loop_continue_exc jessie_6 -> void end end done;
       (raise (Goto_while_0_break_exc void)) end)) with
      Goto_while_0_break_exc jessie_2 ->
      (while_0_break: begin   void; (raise Return) end) end)); (raise Return)
   end with Return -> void end) { true }

let swap3_ensures_default =
 fun (a_0 : intP pointer) (n_2 : int32) (i : int32) (j : int32) (intP_intM_a_0_2 : (intP, int32) memory ref) (intP_a_0_2_alloc_table : intP alloc_table) ->
  { (JC_21:
    ((JC_12: ge_int(integer_of_int32(n_2), (0)))
    and ((JC_13: le_int(offset_min(intP_a_0_2_alloc_table, a_0), (0)))
        and ((JC_14:
             ge_int(offset_max(intP_a_0_2_alloc_table, a_0),
             sub_int(integer_of_int32(n_2), (1))))
            and ((JC_15: dom(integer_of_int32(i), integer_of_int32(n_2)))
                and ((JC_16: dom(integer_of_int32(j), integer_of_int32(n_2)))
                    and ((JC_17:
                         le_int(offset_min(intP_a_0_2_alloc_table, a_0),
                         integer_of_int32(i)))
                        and ((JC_18:
                             ge_int(offset_max(intP_a_0_2_alloc_table, a_0),
                             integer_of_int32(i)))
                            and ((JC_19:
                                 le_int(offset_min(intP_a_0_2_alloc_table,
                                        a_0),
                                 integer_of_int32(j)))
                                and (JC_20:
                                    ge_int(offset_max(intP_a_0_2_alloc_table,
                                           a_0),
                                    integer_of_int32(j)))))))))))) }
  (init:
  try
   begin
     (let d = ref (any_int32 void) in
     (C_3:
     (C_8:
     (C_11:
     begin
       (let jessie_22 =
       (d := (C_2:
             ((safe_acc_ !intP_intM_a_0_2) (C_1:
                                           ((shift a_0) (integer_of_int32 j)))))) in
       void);
      (let jessie_28 =
      (let jessie_24 =
      (C_5:
      ((safe_acc_ !intP_intM_a_0_2) (C_4: ((shift a_0) (integer_of_int32 i))))) in
      (let jessie_25 = a_0 in
      (let jessie_26 = (integer_of_int32 j) in
      (let jessie_27 = ((shift jessie_25) jessie_26) in
      (((safe_upd_ intP_intM_a_0_2) jessie_27) jessie_24))))) in void);
      (let jessie_34 =
      (let jessie_30 = !d in
      (let jessie_31 = a_0 in
      (let jessie_32 = (integer_of_int32 i) in
      (let jessie_33 = ((shift jessie_31) jessie_32) in
      (((safe_upd_ intP_intM_a_0_2) jessie_33) jessie_30))))) in void);
      (raise Return) end)))); (raise Return) end with Return -> void end)
  { (JC_28:
    ((JC_26:
     ((JC_23:
      (forall i1:int.
       (dom(i1, integer_of_int32(n_2)) ->
        (exists i2:int.
         (dom(i2, integer_of_int32(n_2))
         and (integer_of_int32(select(intP_intM_a_0_2@, shift(a_0, i1))) = 
             integer_of_int32(select(intP_intM_a_0_2, shift(a_0, i2)))))))))
     and ((JC_24:
          swapped(a_0, integer_of_int32(i), integer_of_int32(j),
          intP_intM_a_0_2, intP_intM_a_0_2@))
         and (JC_25:
             (forall k_1:int.
              ((le_int((0), k_1)
               and (lt_int(k_1, integer_of_int32(n_2))
                   and ((k_1 <> integer_of_int32(i))
                       and (k_1 <> integer_of_int32(j))))) ->
               (integer_of_int32(select(intP_intM_a_0_2, shift(a_0, k_1))) = 
               integer_of_int32(select(intP_intM_a_0_2@, shift(a_0, k_1))))))))))
    and (JC_27:
        not_assigns(intP_a_0_2_alloc_table, intP_intM_a_0_2@,
        intP_intM_a_0_2,
        pset_union(pset_range(pset_singleton(a_0), integer_of_int32(j),
                   integer_of_int32(j)),
        pset_range(pset_singleton(a_0), integer_of_int32(i),
        integer_of_int32(i))))))) }

let swap3_safety =
 fun (a_0 : intP pointer) (n_2 : int32) (i : int32) (j : int32) (intP_intM_a_0_2 : (intP, int32) memory ref) (intP_a_0_2_alloc_table : intP alloc_table) ->
  { (JC_21:
    ((JC_12: ge_int(integer_of_int32(n_2), (0)))
    and ((JC_13: le_int(offset_min(intP_a_0_2_alloc_table, a_0), (0)))
        and ((JC_14:
             ge_int(offset_max(intP_a_0_2_alloc_table, a_0),
             sub_int(integer_of_int32(n_2), (1))))
            and ((JC_15: dom(integer_of_int32(i), integer_of_int32(n_2)))
                and ((JC_16: dom(integer_of_int32(j), integer_of_int32(n_2)))
                    and ((JC_17:
                         le_int(offset_min(intP_a_0_2_alloc_table, a_0),
                         integer_of_int32(i)))
                        and ((JC_18:
                             ge_int(offset_max(intP_a_0_2_alloc_table, a_0),
                             integer_of_int32(i)))
                            and ((JC_19:
                                 le_int(offset_min(intP_a_0_2_alloc_table,
                                        a_0),
                                 integer_of_int32(j)))
                                and (JC_20:
                                    ge_int(offset_max(intP_a_0_2_alloc_table,
                                           a_0),
                                    integer_of_int32(j)))))))))))) }
  (init:
  try
   begin
     (let d = ref (any_int32 void) in
     (C_3:
     (C_8:
     (C_11:
     begin
       (let jessie_8 =
       (d := (C_2:
             (JC_37:
             ((((offset_acc_ intP_a_0_2_alloc_table) !intP_intM_a_0_2) a_0) 
              (integer_of_int32 j))))) in void);
      (let jessie_14 =
      (let jessie_10 =
      (C_5:
      (JC_38:
      ((((offset_acc_ intP_a_0_2_alloc_table) !intP_intM_a_0_2) a_0) 
       (integer_of_int32 i)))) in
      (let jessie_11 = a_0 in
      (let jessie_12 = (integer_of_int32 j) in
      (let jessie_13 = ((shift jessie_11) jessie_12) in
      (JC_39:
      (((((offset_upd_ intP_a_0_2_alloc_table) intP_intM_a_0_2) jessie_11) jessie_12) jessie_10)))))) in
      void);
      (let jessie_20 =
      (let jessie_16 = !d in
      (let jessie_17 = a_0 in
      (let jessie_18 = (integer_of_int32 i) in
      (let jessie_19 = ((shift jessie_17) jessie_18) in
      (JC_40:
      (((((offset_upd_ intP_a_0_2_alloc_table) intP_intM_a_0_2) jessie_17) jessie_18) jessie_16)))))) in
      void); (raise Return) end)))); (raise Return) end with Return ->
   void end) { true }


