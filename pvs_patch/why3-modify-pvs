#!/bin/sh

refinePVS(){
echo "$NOW refinePVS:"  >> $pvs_log_file;  
pvs_custom_file=$1
pvs_file_default=$2
pvs_log_file=$3
patch=$4
list=$(cat $pvs_custom_file | grep "=" | awk '{ print $1 $2 $3 $4}' | cut -f1 -d "=")
touch $patch/temp_refine_pvs
echo $list | sed -e 's/ /\n/g' >> $patch/temp_refine_pvs
list2=$(cat $patch/temp_refine_pvs | grep ":"  | awk '{ print $1 $2 $3 $4}' | cut -f1 -d ":" | cut -f1 -d "(")
rm $patch/temp_refine_pvs
touch $patch/temp_refine_pvs
echo $list2 | sed -e 's/ /\n/g' >> $patch/temp_refine_pvs
$(grep -v '^[[:space:]]*%' $patch/temp_refine_pvs > tt)

while read -r line || [[ -n $line ]]; do
 lineNum=$(cat -n $pvs_file_default  | grep "${line}"  | head -1 |  cut -f 1 )
 echo "$NOW The number of $line in the $pvs_file_default file is: $lineNum"  >> $pvs_log_file;
 lineNum=$((lineNum+1))
 sed -i "$lineNum s/^/  %/" $pvs_file_default
done < tt
rm -rf tt
rm -rf $patch/temp_refine_pvs
}

removeExPVS(){
begin_section=" % BEGIN SECTION - do not delete this line."
end_section=" % END SECTION - do not delete this line."
pvs_file_default=$1
pvs_log_file=$2

numBegSection=$(cat -n $pvs_file_default | grep "${begin_section}" | tail -1 |  cut -f 1)
echo "$NOW The numBeginSection of the $pvs_file_default file is: $numBegSection"  >> $pvs_log_file;  


numEndSection=$(cat -n $pvs_file_default | grep "${end_section}" | tail -1 |  cut -f 1)
echo "$NOW The numEndSection of the $pvs_file_default file is: $numEndSection"  >> $pvs_log_file;

echo "$NOW Remove block from ${numBegSection} to ${numEndSection} in the $pvs_file_default file."  >> $pvs_log_file;
sed -i "${numBegSection},${numEndSection}d" $pvs_file_default
}

processPVS(){
pvs_file=$1
pvs_file_default=$2
pvs_log_file=$3

end_section=" % END SECTION - do not delete this line."
begin_section=" % BEGIN SECTION - do not delete this line."

echo "$NOW $1 is going to be processed." >> $pvs_log_file;

numImp=$(cat -n $pvs_file | grep "IMPORTING" | tail -1 |  cut -f 1)
     echo "$NOW The last IMPORTING of the $1 file has been placed at line number: $numImp"  >> $pvs_log_file;
numEND=$(cat -n $pvs_file | grep "END " | tail -1 |  cut -f 1)
     echo "$NOW The END of the $pvs_file file has been placed at line number: $numEND"  >> $pvs_log_file;
numDefault=$(cat -n $pvs_file_default | grep "IMPORTING" | tail -1 |  cut -f 1)
     echo "$NOW The last IMPORTING of the $pvs_file_default file has been placed at line number: $numDefault"  >> $pvs_log_file;
numImp=$((numImp+1))
numEND=$((numEND-1))
## added two because of the comments provided by default
numDefault=$((numDefault + 2))

touch temp
echo "" >> temp
echo $begin_section >> temp
echo "% $(echo $pvs_file | cut -d "/" -f3)" >> temp
awk -v n=$numImp -v p=$numEND 'NR>=n&&NR<=p' $pvs_file >> temp
echo $end_section >> temp
echo "" >> temp

echo "$NOW Add block from ${numBegSection} to ${numEndSection} in the $pvs_file_default file."  >> $pvs_log_file;
sed -i "${numDefault}r temp" $pvs_file_default
rm -rf temp
echo "$NOW The $pvs_file_default has been updated successfully."  >> $pvs_log_file; 
}

findPVS(){
DIR_FILE_NAME=$1
p=$(find $DIR_FILE_NAME -name '*.pvs')
 if [ -n "$p" ]; then
      echo "$NOW $p has been found." >> $pvs_log_file;
      eval "$2=$p";
 fi
}

exists(){
ex=0
lib=$1
pvs_file_name=$2 
pvs_log_file=$3
flag=$(awk "/$lib/ { print $4; exit }" $pvs_file_name);
   if [ -n "$flag" ]; then
      echo "$NOW $flag has been detected in the $pvs_file_name file." >> $pvs_log_file;
      ex=1;
   fi
return $ex;
}

processProps(){
pvs_log_file=$1
pvs_custom_file=$2
pvs_file_name=$3
patch=$4
pvs_lib_file=$patch/pvs_library.properties
$(grep -v '^[[:space:]]*%' $pvs_custom_file > tt)

list=$(cat  tt | grep "IMPORTING"  | awk '{ print $2 $3 $4}' | sed -e 's/;/ /g'  | cut -f2 )
touch $pvs_lib_file
echo $list | sed -e 's/ /\n/g' | sed -e 's/,/\n/g'  >> $pvs_lib_file
$(grep -v '^[[:space:]]*%' $pvs_lib_file > tt1)
rm $pvs_lib_file

while read -r line || [[ -n $line ]]; do
    exists $line $pvs_file_name $pvs_log_file
   if [ "$?" -eq 0 ]; then     
     echo "$NOW Detected new theory: $line"  >> $pvs_log_file;
     num=$(cat -n $pvs_file_name | grep "IMPORTING" | tail -1 |  cut -f 1)
     echo "$NOW The last IMPORTING has been placed at line number: $num"  >> $pvs_log_file;
     sed -i "$num a\  IMPORTING ${line%%%*}" $pvs_file_name
     echo "$NOW IMPORTING $line has been created in the pvs file." >> $pvs_log_file;
   fi   
done < tt1
rm -rf tt1
rm -rf tt
echo "$NOW The new libraries have been added successfully."  >> $pvs_log_file; 
}

NOW="[$(date +"%m-%d-%Y")-$(date +"%T")]:"
PATCH=../pvs_patch

LOG_DIR=log.pvs
PVS_DEFAULT=$1 

#Extract pvs file name.
PVS=${1#*/}

#Create name of the pvs log file.
LOG=$LOG_DIR/${PVS%.pvs}.log;

#Check/Create log dir
[ ! -d $LOG_DIR ] && mkdir -p $LOG_DIR

#Check/Create log,log.bkp file
[ -f $LOG ] && mv $LOG $LOG.bak 
touch $LOG;
echo "$NOW $PVS" >> $LOG; 
echo "$NOW $(readlink -f  $PVS)" >> $LOG; 
# find custom PVS file and do processing
findPVS $PATCH RETURN_PVS
removeExPVS $PVS_DEFAULT $LOG

if [ -n "$RETURN_PVS" ]; then
  echo "$NOW File $RETURN_PVS is not empty." >> $LOG
  processProps $LOG  $RETURN_PVS $PVS_DEFAULT $PATCH
  refinePVS $RETURN_PVS $PVS_DEFAULT $LOG $PATCH
  processPVS $RETURN_PVS $PVS_DEFAULT $LOG
else 
  echo "$NOW Custom designed pvs file is either empty or does not exists." >> $LOG;
fi
exit 0;
