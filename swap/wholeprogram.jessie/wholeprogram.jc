# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint8 = 0..255

type int8 = -128..127

type int32 = -2147483648..2147483647

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

predicate dom{L}(int32 k, int32 n) =
((k >= 0) && (k <= (n - 1)))

unit swap3(intP[..] a, int32 n_1, int32 i, int32 j)
  requires (C_20 : ((C_21 : (n_1 >= 0)) &&
                     ((C_23 : (\offset_min(a) <= 0)) &&
                       (C_24 : (\offset_max(a) >= (n_1 - 1))))));
  requires (C_17 : ((C_18 : dom{Here}(i, n_1)) && (C_19 : dom{Here}(j, n_1))));
behavior default:
  assigns (a + i).intM,
  (a + j).intM;
  ensures (C_12 : (((C_14 : (\at((a + i).intM,Old) ==
                              (\at(a,Old) + \at(j,Old)).intM)) &&
                     (C_15 : (\at((a + j).intM,Old) ==
                               (\at(a,Old) + \at(i,Old)).intM))) &&
                    (C_16 : (\forall int32 i1;
                              (dom{Here}(i1, \at(n_1,Old)) ==>
                                (\exists int32 i2;
                                  (dom{Here}(i2, \at(n_1,Old)) &&
                                    (\at((a + i1).intM,Old) ==
                                      (\at(a,Old) + i2).intM))))))));
{  
   (var int32 d);
   
   {  (C_3 : (d = (C_2 : (C_1 : (a + j)).intM)));
      (C_8 : ((C_7 : (C_6 : (a + j)).intM) = (C_5 : (C_4 : (a + i)).intM)));
      (C_11 : ((C_10 : (C_9 : (a + i)).intM) = d));
      
      (return ())
   }
}
