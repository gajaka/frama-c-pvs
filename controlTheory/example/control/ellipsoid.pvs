ellipsoid: theory

BEGIN

IMPORTING linear_algebra@matrices,
          linear_algebra@matrix_operator
%linalg@matrix_operator, linalg@block_matrices, schur_formula

M,N : VAR Matrix
i,j,n : VAR int 

 Zero_mat(m:posnat,n:posnat):Matrix = (# rows := m, cols := n,
         matrix := LAMBDA (i : below(m)),(j :below(n)): 0 #)

 Vector_no_param: TYPE = [# length: posnat, vect: vectors[length].Vector #]

-(x: Vector_no_param,y: Vector_no_param | x`length=y`length) : Vector_no_param = (# length:=x`length, vect:=x`vect-y`vect #);

*(P: Matrix, c: Vector_no_param | P`cols=c`length) : Vector_no_param = (# length:= P`rows, vect:= P*c`vect #)

V2Mc(n:posnat, V: Vector[n]): Matrix =
    (# rows := 1, cols := n,
         matrix := LAMBDA (k: below(1),j: below(n)): V(j) #)

in_ellipsoid?(P: Matrix, x:Vector_no_param ): 
		 MACRO bool = 
		       IF x`length = P`cols AND P`cols=P`rows
		       THEN ((x`vect)*(P*(x`vect)) <=1)
		       ELSE FALSE
		       ENDIF

%in_ellipsoid_Q?(n:posnat, Q:SquareMat(n), x:Vector[n]): bool =
%	semidef_pos?(Q) AND symmetric?(Q) AND semidef_pos?(Block2M(M2Block(1,n,1,n)(I(1),transpose(V2Mc(n,x)),V2Mc(n,x),Q)))  


%in_ellipsoidQ?(Q: Matrix, x: Vector_no_param):
%		  MACRO bool =
%		  	IF x`length = Q`cols AND Q`cols=Q`rows	
%			THEN in_ellipsoid_Q?(x`length, Q,x`vect)
%			ELSE FALSE
%			ENDIF

ellipsoid: LEMMA
  forall (n:posnat, Q, M: SquareMat(n), x, y, b, c: Vector[n]):
                 bijective?(n)(T(n,n)(Q)) AND bijective?(n)(T(n,n)(M))
                 AND (x-c)*(inv(n)(Q)*(x-c))<=1  
                 AND y=M*x + b
                 IMPLIES 
                 (y-b-M*c)*(inv(n)(M*(Q*transpose(M)))*(y-b-M*c))<=1

%ellipsoid_simp: LEMMA
%  forall (n:posnat, Q, M: SquareMat(n), x, y: Vector[n]):
%                 bijective?(n)(T(n,n)(Q)) AND bijective?(n)(T(n,n)(M))
%                 AND x*(inv(n)(Q)*x)<=1  
%                 AND y=M*x
%                 IMPLIES 
%                 y*(inv(n)(M*(Q*transpose(M)))*(y))<=1

% (From Romain:) This is the theorem I'd like tu use ideally:

%ellipsoid_general: LEMMA %TODO HEBER
% forall (n:posnat,m:posnat, Q:SquareMat(n), M: Mat(m,n), x:Vector[n], y:Vector[m]):
%		in_ellipsoid_Q?(n,Q,x)
%		AND y = M*x
%		IMPLIES in_ellipsoid_Q?(m,M*Q*transpose(M),y)
		
%ellipsoid_combination: LEMMA %TODO HEBER
% forall (n,m:posnat, l1, l2: posreal, a:real,Q_1: Mat(n,n), Q_2: Mat(m,m), x:Vector[n], y:Vector[m], z:Vector[m+n]):
%	    in_ellipsoid_Q?(n,Q_1,x)
%	AND in_ellipsoid_Q?(m,Q_2,y)
%	AND l1+ l2 = 1
%	AND z = Block2V(V2Block(n,m)(x,y))
%	IMPLIES 
 %       in_ellipsoid_Q?(n+m,Block2M(M2Block(n,m,n,m)(1/l1*Q_1,Zero_mat(m,n),Zero_mat(n,m),a*Q_2)),z)%1/2*Q_2
	
	


%IMPORTING ellipsoid_annotations{{in_ellipsoid:=in_ellipsoid?}}


%in_ellipsoid: Theorem Forall(P:SquareMat(n),y,x,b:Vector[n]):
%                      in_ellipsoid(P,x) AND squareMat?(n)(A) and
%                      y=A*x+b
%		      IMPLIES
%                      in_ellipsoid(inv(n)(A)*P,y-b)

%thm1:LEMMA same_dim?(M,N) and i<M`rows and j<M`cols 
%           IMPLIES 
%           (M+N)`matrix(i,j)=(N+M)`matrix(i,j)

%thm2 :LEMMA  same_dim?(M,I(n))and i<M`rows and j<n implies
%             (M*I(n))`matrix(i,j)=M`matrix(i,j) 

%thm3: LEMMA same_dim?(M,I(n))implies inv(n)(M)*M=I(n)

%thm4:LEMMA square?(M) AND squareMat?(n)(M) AND bijective?(n)(T(n, n)(M))
%            implies
%           (inv(n)(M)*M)`matrix(i,j)=1

Zero_mat_contain_zeroes: LEMMA zero?(Zero_mat(M`rows,M`cols))

end ellipsoid
